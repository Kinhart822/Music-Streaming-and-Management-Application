package vn.edu.usth.msma.ui.screen.auth.login

import vn.edu.usth.msma.data.preferences.UserPreferences
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.MainScope
import kotlinx.coroutines.launch

data class LoginState(
    val email: String = "",
    val password: String = "",
    val emailError: String? = null,
    val passwordError: String? = null,
    val isLoading: Boolean = false,
    val loginError: String? = null,
    val isLoggedIn: Boolean = false,
    val passwordVisible: Boolean = false
)

class LoginViewModel(private val userPreferences: UserPreferences) : ViewModel() {
    private val _loginState = MutableStateFlow(LoginState())
    val loginState: StateFlow<LoginState> = _loginState.asStateFlow()

    fun updateEmail(email: String) {
        _loginState.update { it.copy(email = email, emailError = null) }
    }

    fun updatePassword(password: String) {
        _loginState.update { it.copy(password = password, passwordError = null) }
    }

    fun togglePasswordVisibility() {
        _loginState.update { it.copy(passwordVisible = !it.passwordVisible) }
    }

    fun login() {
        val currentState = _loginState.value

        // Validate email
        val emailError = when {
            currentState.email.isBlank() -> "Email cannot be empty"
            !android.util.Patterns.EMAIL_ADDRESS.matcher(currentState.email).matches() -> "Invalid email format"
            else -> null
        }

        // Validate password
        val passwordError = when {
            currentState.password.isBlank() -> "Password cannot be empty"
            currentState.password.length < 6 -> "Password must be at least 6 characters"
            else -> null
        }

        if (emailError != null || passwordError != null) {
            _loginState.update {
                it.copy(
                    emailError = emailError,
                    passwordError = passwordError
                )
            }
            return
        }

        _loginState.update { it.copy(isLoading = true) }

        // Simulate login process (replace with actual API call)
        MainScope().launch {
            try {
                // Simulate network delay
                kotlinx.coroutines.delay(1000)

                // Example: Check credentials (replace with real authentication)
                if (currentState.email == "test@example.com" && currentState.password == "password123") {
                    userPreferences.saveLoginState(true)
                    _loginState.update {
                        it.copy(
                            isLoading = false,
                            isLoggedIn = true,
                            loginError = null
                        )
                    }
                } else {
                    _loginState.update {
                        it.copy(
                            isLoading = false,
                            loginError = "Invalid email or password"
                        )
                    }
                }
            } catch (e: Exception) {
                _loginState.update {
                    it.copy(
                        isLoading = false,
                        loginError = "Login failed: ${e.message}"
                    )
                }
            }
        }
    }
}

class LoginViewModelFactory(private val userPreferences: UserPreferences) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(LoginViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return LoginViewModel(userPreferences) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}