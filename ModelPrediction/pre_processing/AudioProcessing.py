def transcribe_lyric_by_whisper(audio_path):
    try:
        print("ƒêang chuy·ªÉn ƒë·ªïi audio th√†nh text b·∫±ng Whisper...")
        model_to_load = whisper.load_model("large")
        result = model_to_load.transcribe(audio_path, fp16=False)
        lyrics = result["text"]

        print("üé§ L·ªùi b√†i h√°t ƒë∆∞·ª£c tr√≠ch xu·∫•t th√†nh c√¥ng!")
        return lyrics
    except Exception as e:
        print(f"‚ùå L·ªói khi tr√≠ch xu·∫•t l·ªùi b√†i h√°t: {e}")
        return None


def separate_vocals(input_file, output_folder="demucs_output"):
    """Ch·∫°y Demucs ƒë·ªÉ t√°ch gi·ªçng h√°t t·ª´ file MP3 v√† ƒë·ªïi t√™n file k·∫øt qu·∫£."""

    # Ki·ªÉm tra file ƒë·∫ßu v√†o c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(input_file):
        print(f"‚ùå L·ªói: File ƒë·∫ßu v√†o '{input_file}' kh√¥ng t·ªìn t·∫°i!")
        return None

    try:
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(output_folder, exist_ok=True)

        filename = os.path.splitext(os.path.basename(input_file))[0]
        vocals_dir = os.path.join(output_folder, "mdx_extra_q", filename)
        vocals_path = os.path.join(vocals_dir, "vocals.mp3")
        new_vocals_path = os.path.join(vocals_dir, f"{filename}_vocals.mp3")

        if os.path.exists(new_vocals_path):
            print(f"‚úÖ File vocals ƒë√£ t·ªìn t·∫°i: {new_vocals_path}")
            return new_vocals_path

        # Ch·∫°y Demucs ƒë·ªÉ t√°ch gi·ªçng h√°t
        command = [
            "demucs", "-o", output_folder, "--mp3",
            "-n", "mdx_extra_q", input_file
        ]
        subprocess.run(command, check=True)

        print(f"‚úÖ T√°ch gi·ªçng h√°t th√†nh c√¥ng! K·∫øt qu·∫£ l∆∞u t·∫°i: {output_folder}")

        # Ki·ªÉm tra file vocals.mp3 c√≥ ƒë∆∞·ª£c t·∫°o ra kh√¥ng
        if not os.path.exists(vocals_path):
            print(f"‚ùå L·ªói: File vocals.mp3 kh√¥ng t·ªìn t·∫°i trong th∆∞ m·ª•c {vocals_dir}")
            return None

        # ƒê·ªïi t√™n file
        os.rename(vocals_path, new_vocals_path)
        print(f"‚úÖ ƒê√£ ƒë·ªïi t√™n file th√†nh: {new_vocals_path}")

        return new_vocals_path

    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y Demucs: {e}")
        return None


def slow_down_audio_ffmpeg(input_file, output_folder="final_output", speed_factor=0.85):
    """L√†m ch·∫≠m audio b·∫±ng FFmpeg v√† lo·∫°i b·ªè kho·∫£ng l·∫∑ng"""
    try:
        # T√°ch t√™n file kh√¥ng c√≥ ph·∫ßn m·ªü r·ªông
        filename = os.path.splitext(os.path.basename(input_file))[0]

        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(output_folder, exist_ok=True)

        # T·∫°o ƒë∆∞·ªùng d·∫´n cho file ƒë√£ l√†m ch·∫≠m
        slowed_audio = os.path.join(output_folder, f"{filename}_slowdown.wav")

        # L·ªánh FFmpeg l√†m ch·∫≠m audio
        command = [
            "ffmpeg", "-i", input_file,
            "-filter:a", f"atempo={speed_factor}", "-vn",
            "-y", slowed_audio  # Ghi ƒë√® file n·∫øu ƒë√£ t·ªìn t·∫°i
        ]
        subprocess.run(command, check=True)

        # G·ªçi h√†m remove_silence ƒë·ªÉ x·ª≠ l√Ω file ƒë√£ l√†m ch·∫≠m
        final_output = os.path.join(output_folder, f"{filename}_final.wav")
        result = remove_silence(slowed_audio, final_output)

        if os.path.exists(slowed_audio):
            os.remove(slowed_audio)

        return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y FFmpeg: {e}")
        return None


def remove_silence(input_audio, output_audio, silence_threshold="-40dB", min_silence_duration="0.5"):
    """Lo·∫°i b·ªè kho·∫£ng l·∫∑ng trong file audio b·∫±ng FFmpeg"""
    try:
        command = [
            "ffmpeg",
            "-i", input_audio,
            "-af",
            f"silenceremove=stop_periods=-1:stop_duration={min_silence_duration}:stop_threshold={silence_threshold}",
            "-y",
            output_audio
        ]
        subprocess.run(command, check=True)
        return output_audio
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi lo·∫°i b·ªè kho·∫£ng l·∫∑ng: {e}")
        return None

def process_audio(input_file):
    # T·∫°o file t·∫°m ƒë·ªÉ l∆∞u d·ªØ li·ªáu t·ª´ file object
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_audio:
        temp_audio.write(input_file.read())  # Ghi d·ªØ li·ªáu v√†o file t·∫°m
        temp_audio_path = temp_audio.name  # L∆∞u ƒë∆∞·ªùng d·∫´n file t·∫°m

    print(f"üîÑ ƒê√£ l∆∞u file t·∫°m: {temp_audio_path}")

    # G·ªçi h√†m ƒë·ªÉ t√°ch vocals t·ª´ file t·∫°m
    vocals_path = separate_vocals(temp_audio_path)

    if vocals_path and os.path.exists(vocals_path):
        processed_audio = slow_down_audio_ffmpeg(vocals_path)

        # X√≥a file t·∫°m sau khi x·ª≠ l√Ω xong
        os.remove(temp_audio_path)
        os.remove(vocals_path)

        if processed_audio:
            print(f"üéµ Audio ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng: {processed_audio}")
            return processed_audio
        else:
            print(f"‚ùå L·ªói khi l√†m ch·∫≠m audio cho {vocals_path}")
            return None

    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file vocals t·∫°i {vocals_path}")
    os.remove(temp_audio_path)
    return None
